const int N = 11, INF = 0x3f3f3f3f;
int dist[N][N];

class Solution {
public:
    int numberOfSets(int n, int maxDistance, vector<vector<int>>& roads) {
        function<bool(int)> check = [&](int mask) {
            if(__builtin_popcount(mask) <= 1) return true;
            memset(dist, 0x3f, sizeof(dist));
            for(int i = 0; i < n; i++) {
                dist[i][i] = 0;
            }
            for(auto&edge: roads) {
                int u = edge[0], v = edge[1], w = edge[2];
                if((mask>>u&1) && (mask>>v&1)) {
                    dist[u][v] = min(w, dist[u][v]);
                    dist[v][u] = min(w, dist[v][u]);
                }
            }
            for(int k = 0; k < n; k++) {
                for(int i = 0; i < n; i++) {
                    for(int j = 0; j < n; j++) {
                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                    }
                }
            }
            int ans = -1;
            for(int i = 0; i < n; i++) {
                for(int j = i + 1; j < n; j++) {
                    if((mask>>i&1) && (mask>>j&1)) {
                        if(dist[i][j] > ans) {
                            ans = dist[i][j];
                        }
                    }
                }
            }
            if(ans == -1) return false;
            return ans <= maxDistance;
        };
        int ans = 0;
        for(int mask = 0; mask < 1<<n; mask++) {
            if(check(mask)) {
                ans++;
            }
        }
        return ans;
    }
};
