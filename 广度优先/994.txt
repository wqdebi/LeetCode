class Solution 
{
public:
    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    int orangesRotting(vector<vector<int>>& grid) 
    {
        int len1 = grid.size();
        int len2 = grid[0].size();
        queue<pair<int, int>> q;
        vector<vector<int>> tem;
        int time = 0;
        while(true)
        {
            tem = grid;
            for(int i = 0; i < len1; i++)
            {
                for(int j = 0; j < len2; j++)
                {
                    if(grid[i][j] == 2)
                    q.emplace(i, j);
                }
            }
            while(!q.empty())
            {
                auto [i, j] = q.front();
                q.pop();
                for (int d = 0; d < 4; ++d) 
                {
                    int ni = i + dirs[d][0];
                    int nj = j + dirs[d][1];
                    if (ni >= 0 && ni < len1 && nj >= 0 && nj < len2 && grid[ni][nj] == 1) 
                    {
                        grid[ni][nj] = 2;
                    }
                }
            }
            if(tem == grid)
                break;
            time ++;
        }
        for(int i = 0; i < len1; i++)
        {
            for(int j = 0; j < len2; j++)
                if(tem[i][j] == 1)
                    return -1;
        }
        return time;
    }
};